summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ D, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ ABC, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ ABD, data3)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ ABC, data3)
summary(fish.aov)
A = as.integer(data2$Apatite)
B = as.integer(data2$pH)
C = as.integer(data2$Pb)
D = as.integer(data2$Diet)
AB = A*B
AC = A*C
AD = A*D
BC = B*C
BD = B*D
CD = C*D
ABC = A*B*C
ABD = A*B*D
ACD = A*C*D
BCD = B*C*D
ABCD = A*B*C*D
ABCD.model = data.frame(A,B,C,D,AB,AC,AD,ABCD)
# First looking at Pb_Response
example_effect = find.effect(ABCD.model, data2$Pb_Response_mM,
n = 1)
conf = nrow(example_effect)
tmp = qqnorm(example_effect[-conf,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(example_effect[-conf,2], datax = TRUE)
text(tmp$x, tmp$y, example_effect[-conf,1], pos = 3, cex = .55)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ ABC, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ D, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ A, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ BCD, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ A, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ ABD, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ ABCD, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ 1, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ ABCD, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ ABCD, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ A, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ B, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ C, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ D, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ AB, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ AC, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ A+B+AB, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ A+C+AC, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ A+D+AD, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ B+C+BC, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ B+D+BD, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ C+D+CD, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ A+B+C+ABC, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ A+B+C+D, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ A+B+C, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ A+C, data3)
summary(fish.aov)
# First looking at pH_Response
example_effect = find.effect(ABCD.model, data2$pH_Response,
n = 1)
conf = nrow(example_effect)
tmp = qqnorm(example_effect[-conf,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(example_effect[-conf,2], datax = TRUE)
text(tmp$x, tmp$y, example_effect[-conf,1], pos = 3, cex = .55)
example_effect
library(latex2exp)
library(ggplot2)
library(MASS)
library(class)
library(plotly)
library(dplyr)
library(pwr)
library(gridExtra)
library(metRology)
library(broom)
library(lme4)
library(rsm)
# Bansal's code
#A function to find the effect given a model, the response, and the number of replications
find.effect = function(model, response, n = 1){
#This will make a data frame with the column names from your model in the first column
#The second column will give you all 0 values
effect.calc = data.frame(colnames(model), rep(0, n=length(model)))
#Here is the formula to determine 2^(k-1)*n
#where 2^(k-1) is simply the number of observations at each level
df = nrow(model)/2*n
#This function will give the effects based on the model you put in.
effect.calc[,2] = sapply(1:ncol(model), function(i) sum(model[,i]*response)/df)
return(effect.calc)
#This states that the given value will be returned by the function
}
A = c(-1,1,-1,1,-1,1,-1,1)
B = c(-1,-1,1,1,-1,-1,1,1)
C = c(-1,-1,-1,-1,1,1,1,1)
AB = A*B
AC = A*C
BC = B*C
ABC = A*B*C
life1 = c(22,32,35,55,44,40,60,39)
life2 = c(31,43,34,47,45,37,50,41)
life3 = c(25,29,50,46,38,36,54,47)
life = c(life1, life2, life3)
block = c(1,2,2,1,2,1,1,2)
k = 3
n = 1
ABC.model = data.frame(A,B,C,AB,AC,BC,ABC)
tool_effect = find.effect(ABC.model, life1, n = n)
tool_effect
con = nrow(tool_effect)
tmp = qqnorm(tool_effect[-con,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(tool_effect[-con,2], datax = TRUE)
text(tmp$x, tmp$y, tool_effect[-con,1], pos = 3, cex = .55)
ABC.model = data.frame(A,B,C,AB,AC,BC,ABC,life1,block)
speed.aov = aov(life1 ~ block + A + B + C + AC,
ABC.model)
summary(speed.aov)
A = rep(c(-1,1,-1,1),4)
B = rep(c(-1,-1,1,1),4)
C = rep(c(-1,-1,-1,-1,1,1,1,1),2)
D = c(rep(c(-1,-1,-1,-1),2), rep(c(1,1,1,1),2))
Yield = c(6.08, 6.04, 6.53, 6.43, 6.31, 6.09,
6.12, 6.36, 6.79, 6.68, 6.73, 6.08,
6.77, 6.38, 6.49, 6.23)
AB = A*B; AC = A*C; AD = A*D; BD = B*D; CD = C*D
ABC = A*B*C; ABD = A*B*D; BCD = B*C*D; ACD = A*C*D
ABCD = A*B*C*D
ABCD.model = data.frame(A,B,C,D,AB,AC,AD,BC,BD,CD,
ABC,ABD,ACD,BCD,ABCD)
isatin_effect = find.effect(ABCD.model, Yield, n = 1)
conf = nrow(isatin_effect)
tmp = qqnorm(isatin_effect[-conf,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(isatin_effect[-conf,2], datax = TRUE)
# Use plot.window to expand the axes
# plot.window(xlim = xlim_range, ylim = ylim_range)
text(tmp$x, tmp$y, isatin_effect[-conf,1], pos = 3, cex = .55)
# myplot <- ggplot(isatin_effect,
#                  aes(sample = rep.0..n...length.model..)) +
#   stat_qq() +
#   stat_qq_line() +
#   xlab("Theoretical Quantiles") +
#   ylab("Sample Quantiles")
#
# x.pnts <- ggplot_build(myplot)$data[[1]]$x
# y.pnts <- ggplot_build(myplot)$data[[1]]$y
#
# offset <- (max(y.pnts) - min(y.pnts)) / 20
#
# myplot +
#     geom_text(label = isatin_effect$colnames.model.,
#               x = x.pnts,
#               y = y.pnts + offset)
block = as.factor(c(0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0))
ABCD.model = data.frame(A,B,C,D,AB,AC,AD,BC,BD,CD,
ABC,ABD,ACD,BCD,ABCD,Yield,block)
isatin.aov = aov(Yield ~ block + (B + D)^2,
ABCD.model)
summary(isatin.aov)
(block_effect_by_hand =
mean(ABCD.model$Yield[ABCD.model$block == 0]) -
mean(ABCD.model$Yield[ABCD.model$block == 1]))
Yieldbar = sum(ABCD.model$Yield)
(block_sum_of_squares_by_hand =
sum(ABCD.model$Yield[ABCD.model$block == 0])^2/8 +
sum(ABCD.model$Yield[ABCD.model$block == 1])^2/8 -
Yieldbar^2/16)
ABCD.model$Yield = c(25,71,48,45,68,40,60,65,
43,80,25,104,55,86,70,76)
ABCD.model$Yield[block == 1] = ABCD.model$Yield[block == 1] + 20
(block_effect_by_hand =
mean(ABCD.model$Yield[ABCD.model$block == 0]) -
mean(ABCD.model$Yield[ABCD.model$block == 1]))
ABCD.model = data.frame(A,B,C,D,AB,AC,AD,BC,BD,CD,
ABC,ABD,ACD,BCD,ABCD)
Yield = c(25,71,48,45,68,40,60,65,
43,80,25,104,55,86,70,76)
example_effect = find.effect(ABCD.model, Yield, n = 1)
conf = nrow(example_effect)
tmp = qqnorm(example_effect[-conf,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(example_effect[-conf,2], datax = TRUE)
text(tmp$x, tmp$y, example_effect[-conf,1], pos = 3, cex = .55)
example.aov = aov(Yield ~ block + A+C+D+AC+AD,
ABCD.model)
summary(example.aov)
A = c(-1,1,-1,1,-1,1,-1,1)
B = c(-1,-1,1,1,-1,-1,1,1)
C = c(-1,-1,-1,-1,1,1,1,1)
AB = A*B
AC = A*C
BC = B*C
ABC = A*B*C
life1 = c(22,32,35,55,44,40,60,39)
life2 = c(31,43,34,47,45,37,50,41)
life3 = c(25,29,50,46,38,36,54,47)
life = c(life1, life2, life3)
blocks = as.factor(c(c(0,1,1,0,1,0,0,1),
2+c(0,1,1,0,0,1,1,0),
4+c(0,0,1,1,1,1,0,0)))
rep = as.factor(c(rep(1,8), rep(2,8), rep(3,8)))
(tool = data.frame(A,B,C,AB,AC,BC,ABC,life,blocks,rep))
ABC.model = data.frame(A,B,C,AB,AC,BC,ABC)
tool_effect = find.effect(ABC.model, life, n = 3)
tmp = qqnorm(tool_effect[,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(tool_effect[,2], datax = TRUE)
text(tmp$x, tmp$y, tool_effect[,1], pos = 3, cex = .55)
# tool.aov = aov(life ~ rep + blocks%in%rep + (A+B+C)^2, tool)
tool.aov = aov(life ~ blocks + (A+B+C)^2, tool)
summary(tool.aov)
tool.lm = lm(life ~ blocks + (A+B+C)^2, tool)
summary(tool.lm)
A = c(-1,1,1,-1,1,-1,-1,1)
B = c(-1,1,-1,1,-1,1,-1,1)
C = c(-1,-1,1,1,-1,-1,1,1)
D = c(-1,-1,-1,-1,1,1,1,1)
AB = A*B
AC = A*C
AD = A*D
BC = B*C
BD = B*D
CD = C*D
ABCD = A*B*C*D
responses = c(2.45,2.29,3.39,2.32,2.24,1.69,2.29,2.03)
cc = data.frame(A,B,C,D,AB,AC,AD,BC,BD,CD,ABCD,responses)
ABCD.model = data.frame(A,B,C,D,AB,AC,AD,BC,BD,CD,ABCD)
example_effect = find.effect(ABCD.model, responses, n = 1)
# since we confounded ABCD, do not plot it
tmp = qqnorm(example_effect[-nrow(example_effect),2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(example_effect[-nrow(example_effect),2], datax = TRUE)
text(tmp$x, tmp$y, example_effect[-nrow(example_effect),1], pos = 3, cex = .55)
cc.aov = aov(responses ~ A + B + C + D + AC, cc)
summary(cc.aov)
A = c(-1,1,1,-1,1,-1,-1,1,-1,1,1,1)
B = c(-1,1,-1,1,-1,1,-1,1,1,1,1,1)
C = c(-1,-1,1,1,-1,-1,1,1,-1,1,-1,1)
D = c(-1,-1,-1,-1,1,1,1,1,-1,-1,1,1)
AB = A*B
AC = A*C
AD = A*D
BC = B*C
BD = B*D
CD = C*D
ABCD = A*B*C*D
responses = c(2.45,2.29,3.39,2.32,2.24,1.69,2.29,2.03,
2.16,2.44,1.87,2.04)
blocks = as.factor(c(rep(1,8),rep(2,4)))
cc = data.frame(A,B,C,D,AB,AC,AD,BC,BD,CD,ABCD,responses,blocks)
ABCD.model = data.frame(A,B,C,D,AB,AC,AD,BC,BD,CD,ABCD)
example_effect = find.effect(ABCD.model, responses, n = 1)
tmp = qqnorm(example_effect[,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(example_effect[,2], datax = TRUE)
text(tmp$x, tmp$y, example_effect[,1], pos = 3, cex = .55)
cc.aov = aov(responses ~ blocks + A + B + C + D + AB + AC + AD, cc)
summary(cc.aov)
A = rep(c(-1,1,-1,1),2)
B = rep(c(-1,-1,1,1),2)
AB = A*B
rate = c(45,100,45,65,75,60,80,96)
filt = data.frame(A,B,AB,rate)
summary(aov(rate ~ A + B + AB, filt))
(eff_A = sum(A*rate)/(2*2^2))
(eff_B = sum(B*rate)/(2*2^2))
(eff_AB = sum(AB*rate)/(2*2^2))
summary(lm(rate ~ A + B + AB, filt))
(data <- data.frame(
A = c(-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1),
B = c(-1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1),
C = c(-1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1),
D = c(-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1),
E = c(1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1),
y = c(7.93, 5.56, 5.77, 12.00, 9.17, 3.65, 6.40, 5.69,
8.82, 17.55, 8.87, 8.94, 13.06, 11.49, 6.25, 26.05)
))
data$AB = data$A*data$B
data$AC = data$A*data$C
data$AD = data$A*data$D
data$AE = data$A*data$E
data$BC = data$B*data$C
data$BD = data$B*data$D
data$BE = data$B*data$E
data$CD = data$C*data$D
data$CE = data$C*data$E
data$DE = data$D*data$E
example_effect = find.effect(subset(data, select = -y), data$y, n = 1)
tmp = qqnorm(example_effect[,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(example_effect[,2], datax = TRUE)
text(tmp$x, tmp$y, example_effect[,1], pos = 3, cex = .55)
x.aov = aov(y ~ .-(BD+CE+AC), data)
summary(x.aov)
data <- data.frame(
Apatite = factor(c(30, 30, 60, 60, 30, 30, 60, 60,
30, 30, 60, 60, 30, 30, 60, 60)),
pH = factor(c(5, 5, 5, 5, 7, 7, 7, 7, 5, 5, 5, 5, 7, 7, 7, 7)),
Pb = factor(c(0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48, 0.48,
2.41, 2.41, 2.41, 2.41, 2.41, 2.41, 2.41, 2.41)),
Diet = factor(c("Fishbone", "Fishbone", "Hydroxyapatite", "Hydroxyapatite",
"Hydroxyapatite", "Hydroxyapatite", "Fishbone", "Fishbone",
"Hydroxyapatite", "Hydroxyapatite", "Fishbone", "Fishbone",
"Fishbone", "Fishbone", "Hydroxyapatite", "Hydroxyapatite")),
Pb_Response_mM = c(0.05, 0.05, 0.03, 0.05, 0, 0, 0.01, 0,
1.34, 1.26, 1.11, 1.04, 2.11, 2.18, 0.11, 0.12),
pH_Response = c(4.50, 4.74, 3.36, 3.24, 5.53, 5.43, 6.84, 6.61,
2.82, 2.79, 3.35, 3.34, 5.29, 5.06, 3.49, 3.46)
)
data
for(i in 1:4){
levels(data[,i]) <- c(-1,1)
}
data2 = data[c(T,F),]; rownames(data2) <- 1:nrow(data2)
data2
A = as.integer(data2$Apatite)
B = as.integer(data2$pH)
C = as.integer(data2$Pb)
D = as.integer(data2$Diet)
AB = A*B
AC = A*C
AD = A*D
BC = B*C
BD = B*D
CD = C*D
ABC = A*B*C
ABD = A*B*D
ACD = A*C*D
BCD = B*C*D
ABCD = A*B*C*D
ABCD.model = data.frame(A,B,C,D,AB,AC,AD,ABCD)
# First looking at Pb_Response
example_effect = find.effect(ABCD.model, data2$Pb_Response_mM,
n = 1)
conf = nrow(example_effect)
tmp = qqnorm(example_effect[-conf,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(example_effect[-conf,2], datax = TRUE)
text(tmp$x, tmp$y, example_effect[-conf,1], pos = 3, cex = .55)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ A+C, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = lm(Pb_Response_mM ~ (A+B+C+D)^2, data3)
summary(fish.aov)
data3 = data2
colnames(data3) = c("A","B","C",colnames(data2)[-(1:3)])
fish.aov = aov(Pb_Response_mM ~ (A+B+C+D)^2, data3)
summary(fish.aov)
# First looking at pH_Response
example_effect = find.effect(ABCD.model, data2$pH_Response,
n = 1)
conf = nrow(example_effect)
tmp = qqnorm(example_effect[-conf,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(example_effect[-conf,2], datax = TRUE)
text(tmp$x, tmp$y, example_effect[-conf,1], pos = 3, cex = .55)
fish.aov = aov(ph_Response ~ A+B+C+D+AD, data3)
data3
fish.aov = aov(pH_Response ~ A+B+C+D+AD, data3)
summary(fish.aov)
fish.aov = aov(pH_Response ~ A+B+C+D+AD, data3)
summary(fish.aov)
A = as.integer(data2$Apatite)
B = as.integer(data2$pH)
C = as.integer(data2$Pb)
D = as.integer(data2$Diet)
AB = A*B
AC = A*C
AD = A*D
BC = B*C
BD = B*D
CD = C*D
ABC = A*B*C
ABD = A*B*D
ACD = A*C*D
BCD = B*C*D
ABCD = A*B*C*D
ABCD.model = data.frame(A,B,C,D,AB,AC,AD,ABCD)
# First looking at Pb_Response
example_effect = find.effect(ABCD.model, data2$Pb_Response_mM,
n = 1)
conf = nrow(example_effect)
tmp = qqnorm(example_effect[-conf,2], main = "Normal Probability Plot",
ylab = "Effects", xlab = "Theoretical Quantiles",
datax = TRUE); qqline(example_effect[-conf,2], datax = TRUE)
text(tmp$x, tmp$y, example_effect[-conf,1], pos = 3, cex = .55)
example_effect
source("~/.active-rstudio-document", echo=TRUE)
method_2 = numeric(k)
method_2
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
all.equal(method_1, method_2, chatGPT_method)
all.equal(method_1, method_2)
all.equal(method_1, chatGPT_method)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
9.93/3.88
setwd("C:/Users/thema/Dropbox/Research/SVecchia_RobustGaSP/RobustGaSP - Josh/RobustGaSP2")
devtools::install()
source("C:/Users/thema/Dropbox/Research/Vecchia/testing_derivatives.R", echo=TRUE)
all.equal(c(2,2,2,2,2))
length(unique(c(2,2,2,2,2)))
unique(c(2,2,2,2,2))
unique(c(2,2,2,2,2)) = as.int(2)
unique(c(2,2,2,2,2)) = int(2)
integer(2)
unique(c(2,2,2,2,2)) = as.integer(2)
unique(c(2,2,2,2,2))
as.integer(2)
unique(c(2,2,2,2,2)) == as.integer(2)
setwd("C:/Users/thema/Dropbox/Research/SVecchia_RobustGaSP/RobustGaSP - Josh/RobustGaSP2")
devtools::install()
